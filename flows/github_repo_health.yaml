steps:
  - op: http_request
    id: get_repos
    request:
      source: "github"
      url: "https://api.github.com/user/repos"
      method: GET
      headers:
        "Accept": "application/vnd.github+json"
        "X-GitHub-Api-Version": "{{ var('api_version') }}"
    response:
      success_status: [200]
      tables: 
        - source: "duckdb"
          table: "github_repos"
          columns: {
            "id": "text", "name": "text", "full_name": "text", "owner_username": "text", 
            "open_issues_count": "text", "forks_count": "text", "watchers_count": "text"
          }
      parser_expression: |
        repos = response.json() # array of objects representing repos
        for repo in repos:
          # Extract the owner username
          repo["owner_username"] = repo["owner"]["login"]
        return {
          "tables": {  
            "github_repos": repos
          }
        }
  - op: http_request
    id: get_issues
    for_each:
      source: "duckdb"
      table: "github_repos"
      as: repo
    request:
      source: "github"
      url_expression: f"https://api.github.com/repos/{ var('repo').get('owner_username') }/{ var('repo').get('name') }/issues"
      method: GET
      headers:
        "Accept": "application/vnd.github+json"
        "X-GitHub-Api-Version": "{{ var('api_version') }}"
    response:
      success_status: [200]
      tables: 
        - source: "duckdb"
          table: "github_issues"
          columns: {"repo_id": "text", "id": "text", "title": "text", "state": "text", "created_at": "text", "updated_at": "text"}
          data_expression: | 
            issues = response.json()
            for issue in issues:
              issue["repo_id"] = context.var("repo").get("id")
            return issues 
   
  - op: transform
    id: create_health_report
    source: duckdb
    query: |
      SELECT
        r.name AS repository_name,
        r.full_name AS full_repository_name,
        COUNT(CASE WHEN i.state = 'open' THEN 1 END) AS actual_open_issues,
        COUNT(i.id) AS total_issues,
        CASE WHEN COUNT(i.id) > 0 THEN 
          ROUND((COUNT(CASE WHEN i.state = 'closed' THEN 1 END) * 100.0 / COUNT(i.id))::numeric, 2)
          ELSE 0 END AS issue_resolution_rate,
        ROUND(AVG(CASE WHEN i.state = 'open' THEN 
          EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - i.created_at::timestamp))/86400 END)::numeric, 1) AS avg_age_open_issues_days,
        COUNT(CASE WHEN i.state = 'open' AND 
          EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - i.created_at::timestamp))/86400 > 30 THEN 1 END) AS stale_issues_count,
        CASE
          WHEN COUNT(CASE WHEN i.state = 'open' THEN 1 END) > 10 AND 
              COUNT(CASE WHEN i.state = 'open' AND EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - i.created_at::timestamp))/86400 > 30 THEN 1 END) > 5 
              THEN 'Needs attention'
          WHEN COUNT(CASE WHEN i.state = 'open' THEN 1 END) > 0 AND 
              AVG(CASE WHEN i.state = 'open' THEN EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - i.created_at::timestamp))/86400 END) > 60 
              THEN 'Stale'
          WHEN COUNT(i.id) = 0 THEN 'No activity'
          WHEN COUNT(i.id) > 0 AND COUNT(CASE WHEN i.state = 'open' THEN 1 END) < 5 THEN 'Healthy'
          ELSE 'Moderate'
        END AS health_status
      FROM github_repos r
      LEFT JOIN github_issues i ON r.id = i.repo_id
      GROUP BY r.id, r.name, r.full_name, r.open_issues_count, r.forks_count, r.watchers_count;
    target_table: "github_repo_health_report"
  - op: http_request
    id: create_gist
    request:
      source: "github"
      url: "https://api.github.com/gists"
      method: POST
      headers:
        "Accept": "application/vnd.github+json"
        "X-GitHub-Api-Version": "{{ var('api_version') }}"
      body_format: json
      body_expression: |
        # Get the health report data
        report_data = context.sources.query("duckdb", """
          SELECT * FROM github_repo_health_report
        """)
        
        # Format the data as markdown table
        markdown = "# GitHub Repository Health Report\n\n"
        markdown += "| Repository | Open Issues | Total Issues | Resolution Rate (%) | Avg Age (days) | Stale Issues | Health Status |\n"
        markdown += "|------------|-------------|--------------|---------------------|----------------|--------------|---------------|\n"
        
        for row in report_data:
          markdown += f"| {row['repository_name']} | {row['actual_open_issues']} | {row['total_issues']} | {row['issue_resolution_rate']} | {row['avg_age_open_issues_days']} | {row['stale_issues_count']} | {row['health_status']} |\n"
        
        # Create gist payload
        return {
          "description": "GitHub Repository Health Report",
          "public": False,
          "files": {
            "repo_health_report.md": {
              "content": markdown
            }
          }
        }
    response:
      success_status: [201]
      tables: 
        - source: "duckdb"
          table: "github_gist_created"
          columns: {"id": "text", "html_url": "text", "created_at": "text"}
          data_expression: return [response.json()]
      variables:
        gist_url_expression: response.json()["html_url"]

  - op: print
    id: print_gist_url
    message: "Gist URL created: {{ var('gist_url') }}"

