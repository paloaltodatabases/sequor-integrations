
steps:
  - op: execute
    id: create_customers_table
    source: "stage"
    statement: |
      drop table if exists bc_customers_to_insert;
      go

      create table bc_customers_to_insert (
          id text,
          first_name text,
          last_name text,
          email text
      );
      go
      
      insert into bc_customers_to_insert (id, first_name, last_name, email) values
        (1, 'Bob', 'Smith', 'bob@smith.net'),
        (2, 'Jane', 'Brown', 'jane@brown.net'),
        (3, 'Max', 'Brown', 'max@brown.net'),
        (4, 'John', 'Brown', 'john@brown.net'),
        (5, 'Joe', 'Brown', 'joe@brown.net'),
        (6, 'Sophie', 'Brown', 'sophie@brown.net'),
        (7, 'Zoie', 'Brown', 'zoie@brown.net'),
        (8, 'Philip', 'Brown', 'philip@brown.net'),
        (9, 'Maria', 'Brown', 'maria@brown.net'),
        (10, 'Peter', 'Brown', 'peter@brown.net'),
        (11, 'Ivan', 'Brown', 'ivan@brown.net'),
        (12, 'Donald', 'Brown', 'donald@brown.net');
      go
  - op: http_request
    id: create_customers
    for_each:
      source: "stage"
      table: "bc_customers_to_insert"
      as: customer
    request:
      source: "bigcommerce"
      url: "https://api.bigcommerce.com/stores/{{ var('store_hash') }}/{{ var('api_version') }}/customers"
      method: POST
      headers:
        "Content-Type": "application/json"
      body_format: json
      body_expression: |
          return [{
            "first_name": context.var("customer").get("first_name"),
            "last_name": context.var("customer").get("last_name"),
            "email": context.var("customer").get("email")
          }]         
      # Equivalent version using body_expression
      # body:
      #   - "first_name": "{{ var('customer').get('first_name', '__NULL__') }}"
      #     "last_name": "{{ var('customer').get('last_name', '__NULL__') }}"
      #     "email": "{{ var('customer').get('email', '__NULL__') }}"
    response:
      success_status: [200]
      tables: 
        - source: "stage"
          table: "bc_customers_inserted"
          columns: {id: "text", "source_id": "text", "first_name": "text", "last_name": "text", "email": "text"}
      parser_expression: |
        # extract customer with newly generated customer ID
        customers_created = response.json()['data'][0]
        # add the source ID
        customers_created['source_id'] = context.var("customer").get("id")
        # store into database
        return {
          "tables": {  
            "bc_customers_inserted": [ customers_created ]
          }
        } 

  
